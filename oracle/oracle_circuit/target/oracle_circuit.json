{"noir_version":"0.31.0+540bef3597bd3e5775c83ec2ee3c0d4463084b4c","hash":11463613563038492615,"abi":{"parameters":[{"name":"input","type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"H4sIAAAAAAAA/9Vay3LaMBS9GGyHmNKYJkCTDftu5AfY3pFv6Bfgid11O/m+flqniErloihZwJEH3xlGimzOfUpHkRjQP3naf76pvq/aAWs9OhX9bKtacZkkQCzhysYB0EZbbGU7ZHb/F5QDviWZ6CB5Bj4IV5BFzsROzAFu70i1OlYIhW8MGKhMS2W/laKhUrp1nBjPwM3EJs+bIm2SLNmJtKrLtcjX9aZMymRdrl/SMsuaMi+Lqq4KUYk8a5J2XWWtwh2dj5UYWMInNwXjgWOJ9Dn4AKssmrot8mwn8rbe42zaJtulVdKW2R4+y5N614iXvC42+aZsi0P8PLIUroN6Cgi/GkoJyeHEcxWI0AHuDbDIXPl9g8+R1VbEwiJtvXQhMHGRORoTdkJJQpGYz3RkM3Mb56IugFidsf6taiPqgPWlMs76EdOhZegwKZcy/i3hij6ifjA+0ucJ9ZPxJ+SG8T9Rzxh/YhiNwp0Ci8yV31N8jpwwfqRsRTM+MkefCc/4EvOZTgW9GPp0nQTQxfnGkI7kDMTtbKdzp9qYOtjpSGV8pxOTu/MNnRj0+cYd4Yo9JjcFg57gSJ9n1M/dzoywi7OWL9Sz3c7MMBqFew8sMld+3+Nz5GS3Eytb0bsdZI4eCDuh5GIvMbs+30BeA1nMdcL6c9UuqAPWl8o46y/I/fkGT8qljD8nXNEvqB+Mj/R5Sf1k/CW5Yfyv1DPGXxpGo3Af6boZX/r9iM+RE8ZfKFvRjI/M0RPhGV9iuj7fiOk6CUDGYGT4zGvLKpppV6rlV3YrlHGlyAMGbm7D+NUbUOfh+m2Ixt0XQGQJdMT6+pm89p0zH0d4H1OJ6+N9POCGeNxDkeoa8xV2yP7WsRqrPnA7nXDdA/UZM506d7r/wN7V7+l4eCzHUuSBf6D64w++NzK+N2XvBBb/V2D/Q8Oe0LBZ5kBfd8qFzjPm7A0d4wO0LeVzilj8yLCXmB26dVD/hxs9HZsfzev3n79e+Y/yzOnPn3Gz/7zzjnfG9yM6LVM9xlOnx3i69JheCses1SUXMJ22/5LNpY3bzPsevfWJ921jkUVPbBkLLbaaJcKpRMZuq/riQpEYOn6+xbYRe86n8QBvS8L9tf0gNLbE5y8A6aMvySsAAA==","debug_symbols":"ndbNqsIwEAXgd8m6XDKZ/LWvcrlcolYplFRsFaT47qZqN21ATnc5Sb7VMMmM4lDvrqf/Jh67XlS/o2i7fRiaLqY0Cvna6s8hTqkfwmUQlZKqEHU8pBW5RyGOTVuLSrvHXyEoC1jOwOgFUChgFGgUGBRYFDgUeBSUKCAJi3ytjZ+F46VQsGBYaFgYWFhYOFh4WJSoUBIW3/p7LfI19+4jmGgpGBYaFgYWFhYOFh4WJSpYwoJgka05k5kFy6VgWGhYGFhYWDhYeFiUqNASFgSLb32+EvIn/zaQ5o+h1Z+TDG8weoMxG4zFTAq3cGnCrq2naWs6u8b9PHylONzP75N09wk=","file_map":{"47":{"source":"#[oracle(getSqrt)]\nunconstrained fn sqrt(input: [Field; 2]) -> [Field; 2] {}\n\nunconstrained fn get_sqrt(input: [Field; 2]) -> [Field; 2] {\n    sqrt(input)\n}\n\nfn main(input: [Field; 2]) {\n    let sqrt = get_sqrt(input);\n    assert(sqrt[0].pow_32(2) as u64 == input[0] as u64);\n    assert(sqrt[1].pow_32(2) as u64 == input[1] as u64);\n}\n\n#[test]\nfn test_main() {\n    let input = [4, 16];\n    main(input)\n}\n\n#[test(should_fail)]\nfn test_fail() {\n    let input = [4, 15];\n    main(input)\n}\n","path":"/Users/flyingnobita/Data/Project/zk/Aztec/noir-playground/oracle/oracle_circuit/src/main.nr"}},"names":["main"]}