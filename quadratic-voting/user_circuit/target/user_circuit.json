{"noir_version":"0.31.0+540bef3597bd3e5775c83ec2ee3c0d4463084b4c","hash":16009584016524464791,"abi":{"parameters":[{"name":"token_budget","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},{"name":"votes","type":{"kind":"array","length":3,"type":{"kind":"integer","sign":"unsigned","width":32}},"visibility":"private"},{"name":"secret","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"error_types":{}},"bytecode":"H4sIAAAAAAAA/9WXS26DMBCGbZMECLCo1GUXtCfAPILZ9SogQI1ERFTRRr181aCOG/PIonRcKSOhsS3Pb+ebsQmUfJt3fu6hTc+PAW1f6dNRn436BvSlRm/P4IO/GaegOdaNgl0cV2lY8YjnQZgVIgnipNgJLngikjIUUVSJWKRZkaVBxuOo4nWSRTUIb/D2GEgOG40cGHDH5mBq4GAqHKQZyDwQ88dNRJ6WBp6WxrqS5xe7rmwNHOx/qCvE/HEbkedWA88t8FyDLiNTY8h8MWsMgQmXjZmfjqatcnXAu+Ry5rAW/FlYJtgl0wOzupGELtQKQYs7iPtyNRUa9qXrENwaspV66f0n7Ln3DLwBvjePDA378lgjsvII7oWqcpK5ZcBnRYaHXbbX5HL5klH7EXzeddXh2Pld6x/emm5/bD7807578dv36rVu2lM/yVwaaCuBD9PAvCynMc7SxbzfLiY5WeA3isD4ZTX38noiwz/NVBmnSowBY2Q0T/3wYIretTn0io4zs8+7mbEvOmrNmZUNAAA=","debug_symbols":"tZTLCoMwEEX/ZdYunCQm1V8pUuKrCBJFY6GI/96kjVCwj4XMLjdzchZDZhao6mK+XlrT9BNk5wW6vtS27Y1LC4jn1TRo49Nk9Wgh4ygjqE3lTolcI2jaroZMqDXaoTJJAyoVe0fzCBJCtyR0K0L36ahb8K/ulNCNMWFTECnljLItnFJ+dDgVFwFVcidPKOWSUq4o5Z8HVLLwQsTitxwxVoFFFPwPzOLt4yLzRIBZuuYu3PTY6qKr/ab2tdmU2+J20d6HV8WxDw==","file_map":{"29":{"source":"mod poseidon;\nmod mimc;\nmod poseidon2;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::sha256::{digest, sha256_var};\nuse crate::embedded_curve_ops::EmbeddedCurvePoint;\n\n#[foreign(sha256)]\n// docs:start:sha256\npub fn sha256<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<N>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[foreign(pedersen_commitment)]\npub fn __pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\npub fn pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let values = __pedersen_commitment_with_separator(input, separator);\n    EmbeddedCurvePoint { x: values[0], y: values[1], is_infinite: false }\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<N>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<N>(input: [Field; N], separator: u32) -> Field {}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes(32).as_array();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n#[foreign(keccak256)]\n// docs:start:keccak256\npub fn keccak256<N>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<N>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n\n// Generic hashing support. \n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\ntrait Hash{\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\ntrait Hasher{\n    fn finish(self) -> Field;\n    \n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\ntrait BuildHasher<H> where H: Hasher{\n    fn build_hasher(self) -> H;\n}\n\nstruct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn build_hasher(_self: Self) -> H{\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn default() -> Self{\n        BuildHasherDefault{}\n    }    \n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, N> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n","path":"std/hash.nr"},"47":{"source":"use dep::std;\n\nglobal CANDIDATE_COUNT = 3;\nglobal VOTER_COUNT = 2;\n\n// Performed by a user who wants to vote while:\n// - hiding their ballot\n// - prove that they have stayed within budget\n// Return the ballot commitment\nfn main(token_budget: pub u32, votes: [u32; CANDIDATE_COUNT], secret: Field) -> pub Field {\n    check_within_budget(token_budget, votes);\n    calculate_ballot_commitment(votes, secret)\n}\n\nfn check_within_budget(token_budget: u32, votes: [u32; CANDIDATE_COUNT]) {\n    let mut tokens_spent: u32 = 0;\n\n    // calculate tokens_spent for an array of votes\n    for i in 0..CANDIDATE_COUNT {\n        let votes = votes[i];\n        tokens_spent += votes * votes;\n    }\n\n    // check tokens_spent <= token_budget\n    assert(tokens_spent <= token_budget);\n}\n\n// Hashes the contents of a ballot with a secret\nfn calculate_ballot_commitment(votes: [u32; CANDIDATE_COUNT], secret: Field) -> Field {\n    let mut transcript: [Field; CANDIDATE_COUNT + 1] = [0; CANDIDATE_COUNT + 1];\n\n    transcript[0] = secret;\n    for i in 0..CANDIDATE_COUNT {\n        transcript[i + 1] = votes[i] as Field;\n    }\n\n    std::hash::pedersen_hash(transcript)\n}\n","path":"/Users/flyingnobita/Data/Project/zk/Aztec/noir-playground/quadratic-voting/user_circuit/src/main.nr"}},"names":["main"]}